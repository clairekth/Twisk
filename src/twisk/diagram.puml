@startuml
package twisk {
    package monde {
        abstract class Etape {
            # int numEtape
            # String nom
            # GestionnaireSuccesseur gestionnaireSuccesseur

            .. Constructeur ..
            + Etape(String nom)
            .. Getters ..
            + int nbSuccesseurs()
            + boolean estUneActivite()
            + boolean estUnGuichet()
            + boolean estUneSortie()
            + String getNom()
            + int getNumEtape()
            + {abstract} int getNbJetons()
            .. Setters ..
            + void ajouterSuccesseur(Etape... etapes)
            .. Autres méthodes ..
            + Iterator<Etape> iterator()
            + String toString()
            + {abstract} String toC()
        }

        class Activite {
            # int temps
            # int ecartTemps

            .. Constructeurs ..
            + Activite(String nom)
            + Activite(String nom, int t, int e)
            .. Getters ..
            + boolean estUneActivite()
            + int getNbJetons()
            .. Autres méthodes ..
            + String toC()
        }

        class ActiviteRestreinte {
            - int numSemGuichet

            .. Constructeurs ..
            + ActiviteRestreinte(String nom)
            + ActiviteRestreinte(String nom, int t, int e)
            .. Setter ..
            + void aCommeGuichet(int semaphore)
            .. Autres méthodes ..
            + String toC()
        }

        class GestionnaireEtapes {
            - ArrayList<Etape> etapes

            .. Constructeur ..
            + GestionnaireEtapes()
            .. Getters ..
            + int nbEtapes()
            + Etape getEtape(int i)
            .. Setters ..
            + void ajouter((Etape... etapes)
            .. Autres méthodes ..
            + Iterator<Etape> iterator()
            + String toString()
        }

        class GestionnaireSuccesseur {
            - ArrayList<Etape> etapes

            .. Constructeur ..
            + GestionnaireSuccesseur()
            .. Getters ..
            + int nbEtapes()
            + Etape getEtape()
            + Etape getSucc()
            .. Setters ..
            + void ajouter((Etape... etapes)
            .. Autres méthodes ..
            + Iterator<Etape> iterator()
            + String toString()
        }

        class Guichet {
            # int nbJetons
            # int numSemaphore

            .. Constructeurs ..
            + Guichet(String nom)
            + Guichet(String nom, int nb)
            .. Getters ..
            + boolean estUnGuichet()
            + int getNbJetons()
            + int getNumSemaphore()
            .. Autres méthodes ..
            + String toC()
        }

        class Monde {
            # SasEntree entree
            # SasSortie sortie
            # GestionnaireEtapes gestionnaireEtapes

            .. Constructeur ..
            + Monde()
            .. Getters ..
            + int nbEtapes()
            + int nbGuichets()
            + Etape getSasEntree()
            + Etape getSasSortie()
            .. Setters ..
            + void aCommeEntree(Etape... etapes)
            + void aCommeSortie(Etape... etapes)
            + void ajouter(Etape... etapes)
            .. Autres méthodes ..
            + Iterator<Etape> iterator()
            + String toString()
            + String toC()
        }

        class SasEntree {
            .. Constructeur ..
            + SasEntree()
            .. Autres méthodes ..
            + String toC()
        }

        class SasSortie {
            .. Constructeur ..
            + SasSortie()
            .. Autres méthodes ..
            + String toC()
        }
    }

    package outils {
        class FabriqueNumero {
            - FabriqueNumero instance
            - int cptEtape
            - int cptSemaphore

            .. Constructeur ..
            - FabriqueNumero()
            .. Getters ..
            + FabriqueNumero getInstance()
            + int getNumeroEtape()
            + int getNumeroSemaphore()
            .. Setter ..
            + void reset()
        }

        class KitC {
            .. Constructeur ..
            + KitC()
            .. Autres méthodes ..
            + void creerEnvironnement()
            + void copier(InputStream source, File dest)
            + void creerFichier(String codeC)
            + void compiler()
            + void construireLaLibrairie()
        }
    }

    package ressources {
        class "Code C" << (R,#FF7700) Fichier >>
    }

    package simulation {
        class Simulation {
            - KitC kit
            - int nbClients
            .. Constructeur ..
            + Simulation()
            .. Autres méthodes ..
            + int[] start_simulation(int nbEtapes, int nbGuichets, int nbClients, int[] tabJetonsGuichet)
            + void nettoyage()
            + int[] ou_sont_les_clients(int nbEtapes, int nbClients)
            + void setNbClients(int nb)
            + void simuler(Monde monde)
        }
    }

    class ClientTwisk {
        + Monde monde1()
        + void main(String[] args)
    }

    class Iterable<Etape> {
        + Iterator<Etape> iterator()
    }
}

Etape .up.|> Iterable
Activite -up-|> Etape
ActiviteRestreinte -up-|> Activite
GestionnaireEtapes .up.|> Iterable
GestionnaireSuccesseur .up.|> Iterable
Guichet -up-|> Etape
Monde .up.|> Iterable
SasEntree -up-|> Activite
SasSortie -up-|> Activite
@enduml